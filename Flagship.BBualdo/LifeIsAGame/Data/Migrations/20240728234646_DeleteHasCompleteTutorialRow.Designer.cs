// <auto-generated />
using System;
using Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Data.Migrations
{
    [DbContext(typeof(LiagDbContext))]
    [Migration("20240728234646_DeleteHasCompleteTutorialRow")]
    partial class DeleteHasCompleteTutorialRow
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Data.Models.Achievement", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("Requirements")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<int>("XpReward")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Achievements");

                    b.HasData(
                        new
                        {
                            Id = new Guid("41bb8b79-ae97-4d3a-a32f-54d233dbf858"),
                            ImageUrl = "https://i.ibb.co/kGHYJvS/tutorial.jpg",
                            Key = "COMPLETE_TUTORIAL",
                            Requirements = "Complete 'How To Play'.",
                            Title = "Neon Novice",
                            XpReward = 10
                        },
                        new
                        {
                            Id = new Guid("d1ef7adb-1968-4fc9-8fea-a8eeacd4be9e"),
                            ImageUrl = "https://i.ibb.co/KLWDbWg/add-first.jpg",
                            Key = "ADD_FIRST_MISSION",
                            Requirements = "Add your first mission.",
                            Title = "Mission Maverick",
                            XpReward = 10
                        },
                        new
                        {
                            Id = new Guid("ce522009-d197-426e-918c-9b55341c89ce"),
                            ImageUrl = "https://i.ibb.co/473Z5Lr/complete-first.jpg",
                            Key = "COMPLETE_FIRST_MISSION",
                            Requirements = "Complete your first mission.",
                            Title = "Codebreaker Initiate",
                            XpReward = 25
                        },
                        new
                        {
                            Id = new Guid("d69b2719-527f-406a-b710-17bd3025f460"),
                            ImageUrl = "https://i.ibb.co/DGLpVZx/profile.jpg",
                            Key = "COMPLETE_PROFILE",
                            Requirements = "Complete every field in profile dashboard.",
                            Title = "Profile Overdrive",
                            XpReward = 10
                        },
                        new
                        {
                            Id = new Guid("fd0c6301-94a9-4464-87e6-d93f92e825a6"),
                            ImageUrl = "https://i.ibb.co/RCYg2d5/daily.jpg",
                            Key = "COMPLETE_DAILY_MISSION",
                            Requirements = "Complete mission on 'Daily' difficulty.",
                            Title = "Daily Data Dynamo",
                            XpReward = 25
                        },
                        new
                        {
                            Id = new Guid("481a053b-cd75-46e6-a2a2-d2d546ac8859"),
                            ImageUrl = "https://i.ibb.co/c3Nntzw/drop-of-sweat.jpg",
                            Key = "COMPLETE_DROP_OF_SWEAT_MISSION",
                            Requirements = "Complete mission on 'Drop of Sweat' difficulty.",
                            Title = "Sweat-Proof Runner",
                            XpReward = 50
                        },
                        new
                        {
                            Id = new Guid("4ebd2736-94a0-4fe0-91c2-19bd95a139df"),
                            ImageUrl = "https://i.ibb.co/zfBdvCS/challenging.jpg",
                            Key = "COMPLETE_CHALLENGING_MISSION",
                            Requirements = "Complete mission on 'Challenging' difficulty.",
                            Title = "Chaos Conqueror",
                            XpReward = 75
                        },
                        new
                        {
                            Id = new Guid("c7757f74-4d50-46de-8e17-eaa4ef79ea59"),
                            ImageUrl = "https://i.ibb.co/PxmwFbt/life-hacker.jpg",
                            Key = "COMPLETE_LIFE_HACKER_MISSION",
                            Requirements = "Complete mission on 'Life-Hacker' difficulty.",
                            Title = "Life-Hacker Elite",
                            XpReward = 100
                        },
                        new
                        {
                            Id = new Guid("4ae3ed8a-086f-4e75-97fd-24cad7fdc950"),
                            ImageUrl = "https://i.ibb.co/R7WxLcr/anti-procrastinator.jpg",
                            Key = "COMPLETE_ANTI_PROCRASTINATOR_MISSION",
                            Requirements = "Complete mission on 'Anti-Procrastinator' difficulty.",
                            Title = "Procrastination Purged",
                            XpReward = 250
                        },
                        new
                        {
                            Id = new Guid("c9800e7e-b9de-4bc1-8453-1cc23d20cec3"),
                            ImageUrl = "https://i.ibb.co/12Y97TW/every-difficulty.jpg",
                            Key = "COMPLETE_ALL_DIFFICULTY_LEVELS",
                            Requirements = "Complete mission on every difficulty level.",
                            Title = "Difficulty Dominator",
                            XpReward = 200
                        },
                        new
                        {
                            Id = new Guid("c7f83bd8-79db-4622-ab79-c12b8c700653"),
                            ImageUrl = "https://i.ibb.co/X3JvBZQ/give-up.jpg",
                            Key = "GIVE_UP_WITH_SUBTASK",
                            Requirements = "Give up a mission with at least one subtask completed.",
                            Title = "Strategic Surrender",
                            XpReward = 25
                        },
                        new
                        {
                            Id = new Guid("efe7041a-e99c-428f-9aff-921ffa3cdc91"),
                            ImageUrl = "https://i.ibb.co/sF4BDHg/missions5.jpg",
                            Key = "COMPLETE_5_MISSIONS",
                            Requirements = "Complete 5 missions.",
                            Title = "Mission Maestro",
                            XpReward = 50
                        },
                        new
                        {
                            Id = new Guid("2c291e43-d627-4c2c-8894-c93516536c1a"),
                            ImageUrl = "https://i.ibb.co/Jp6PCT0/missions10.jpg",
                            Key = "COMPLETE_10_MISSIONS",
                            Requirements = "Complete 10 missions.",
                            Title = "Deca-Task Dynamo",
                            XpReward = 100
                        },
                        new
                        {
                            Id = new Guid("8cf74b82-39b3-41c8-aad1-7df5c917026d"),
                            ImageUrl = "https://i.ibb.co/rdQ2QkM/missions25.jpg",
                            Key = "COMPLETE_25_MISSIONS",
                            Requirements = "Complete 25 missions.",
                            Title = "Quarter Century Quasar",
                            XpReward = 250
                        },
                        new
                        {
                            Id = new Guid("6bcf31ef-16a0-4150-9d3b-494869c43ef4"),
                            ImageUrl = "https://i.ibb.co/zbKH66t/missions50.jpg",
                            Key = "COMPLETE_50_MISSIONS",
                            Requirements = "Complete 50 missions.",
                            Title = "Half Century Hero",
                            XpReward = 500
                        },
                        new
                        {
                            Id = new Guid("6eb4d5ce-c9eb-4cc5-8fba-dcb19a154b6d"),
                            ImageUrl = "https://i.ibb.co/PcKjDDX/level5.jpg",
                            Key = "REACH_LEVEL_5",
                            Requirements = "Reach level 5.",
                            Title = "Level 5 Luminary",
                            XpReward = 50
                        },
                        new
                        {
                            Id = new Guid("a145c80a-94f0-4bb8-9a20-682a87ed26dd"),
                            ImageUrl = "https://i.ibb.co/6vP8FXv/level10.jpg",
                            Key = "REACH_LEVEL_10",
                            Requirements = "Reach level 10.",
                            Title = "Deca-Level Dynamo",
                            XpReward = 100
                        },
                        new
                        {
                            Id = new Guid("1edcb72a-368e-4438-8cb1-8887d9d52cd5"),
                            ImageUrl = "https://i.ibb.co/Qcbyf2s/level25.jpg",
                            Key = "REACH_LEVEL_25",
                            Requirements = "Reach level 25.",
                            Title = "Quarter Century Cipher",
                            XpReward = 250
                        },
                        new
                        {
                            Id = new Guid("1357cf7f-483a-4662-ab96-25193efc0cdb"),
                            ImageUrl = "https://i.ibb.co/XDhBYzR/level50.jpg",
                            Key = "REACH_LEVEL_50",
                            Requirements = "Reach level 50.",
                            Title = "Half Century Hacker",
                            XpReward = 500
                        },
                        new
                        {
                            Id = new Guid("2be61b37-b91e-42d8-ba11-51c857ac54d6"),
                            ImageUrl = "https://i.ibb.co/tZDHcyJ/all-achievements.jpg",
                            Key = "UNLOCK_ALL_ACHIEVEMENTS",
                            Requirements = "Unlock every achievement.",
                            Title = "Achievement Unleashed",
                            XpReward = 2500
                        });
                });

            modelBuilder.Entity("Data.Models.ErrorLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("Date")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.ToTable("ErrorLogs");
                });

            modelBuilder.Entity("Data.Models.Mission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("CreatedAt")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<int>("Difficulty")
                        .HasColumnType("int");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("XpReward")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Missions");
                });

            modelBuilder.Entity("Data.Models.Subtask", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("MissionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("MissionId");

                    b.ToTable("Subtasks");
                });

            modelBuilder.Entity("Data.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("AvatarUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Bio")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CurrentGoal")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FacebookId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasMaxLength(24)
                        .HasColumnType("nvarchar(24)");

                    b.Property<string>("GithubId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GoogleId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TotalMissionsAdded")
                        .HasColumnType("int");

                    b.Property<int>("TotalMissionsCompleted")
                        .HasColumnType("int");

                    b.Property<int>("TotalXpGained")
                        .HasColumnType("int");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("Xp")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Data.Models.UserAchievement", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AchievementId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UnlockedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("UserAchievements");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Data.Models.Subtask", b =>
                {
                    b.HasOne("Data.Models.Mission", "Mission")
                        .WithMany("Subtasks")
                        .HasForeignKey("MissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Mission");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Data.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Data.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Data.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Data.Models.Mission", b =>
                {
                    b.Navigation("Subtasks");
                });
#pragma warning restore 612, 618
        }
    }
}
